368. Largest Divisible Subset

Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies: Si % Sj = 0 or Sj % Si = 0.

If there are multiple solutions, return any subset is fine.

Example 1:

nums: [1,2,3]

Result: [1,2] (of course, [1,3] will also be ok)
Example 2:

nums: [1,2,4,8]

Result: [1,2,4,8]

public class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        List<Integer> list = new ArrayList<Integer>();
        if(nums == null || nums.length == 0) {
            return list;
        }
        
        Arrays.sort(nums);
        int n = nums.length;
        int[] prev = new int[n];
        int[] len = new int[n];
        int maxIndex = 0;
        int max = 1;
        
        for(int i = 0; i < n; i++) {
            prev[i] = i;
            len[i] = 1;
            for(int j = 0; j < i; j++) {
                if(nums[i] % nums[j] == 0) {
                    if(len[i] < len[j] + 1) {
                        len[i] = len[j] + 1;
                        prev[i] = j;
                    }
                }
            }
        }
        
        for(int i = 0; i < n; i++) {
            if(len[i] > max) {
                max = len[i];
                maxIndex = i;
            }
        }
        
        
        while(prev[maxIndex] != maxIndex) {
            list.add(nums[maxIndex]);
            maxIndex = prev[maxIndex];
        }
        list.add(nums[maxIndex]);
        return list;

    }
}