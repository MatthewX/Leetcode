416. Partition Equal Subset Sum

Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

Note:
Each of the array element will not exceed 100.
The array size will not exceed 200.
Example 1:

Input: [1, 5, 11, 5]

Output: true

Explanation: The array can be partitioned as [1, 5, 5] and [11].
Example 2:

Input: [1, 2, 3, 5]

Output: false

Explanation: The array cannot be partitioned into equal sum subsets.

public class Solution {
    public boolean canPartition(int[] nums) {
        // 背包问题
        if(nums == null || nums.length < 2) {
            return false;
        }
        
        int sum = 0, n = nums.length;
        for(int i = 0; i < n; i++) {
            sum += nums[i];
        }

        if(sum % 2 == 1) {
            return false;
        }
        
        boolean[][] dp = new boolean[n][sum / 2 + 1];

        for(int i = 0; i < n; i++) {
            dp[i][0] = true;
        }
        dp[0][nums[0]] = true;
        
        for(int i = 1; i < n; i++) {
            for(int j = 1; j <= sum / 2; j++) {
                dp[i][j] = dp[i - 1][j];
                if(nums[i] <= j) {
                    dp[i][j] = dp[i][j] || dp[i - 1][j - nums[i]];
                }
            }
        }
        return dp[n - 1][sum / 2];
    }
}