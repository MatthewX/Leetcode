132. Palindrome Partitioning II

public class Solution {
    public int minCut(String s) {
        if(s == null || s.length() <= 1) {
            return 0;
        }
        int n = s.length();
        boolean[][] isPalindrome = new boolean[n][n];
        for(int len = 0; len < n; len++) {
            for(int i = 0; i < n - len; i++) {
                int j = i + len;
                if(len == 0) {
                    isPalindrome[i][j] = true;
                } else if(len == 1) {
                    isPalindrome[i][j] = s.charAt(i) == s.charAt(j);
                } else {
                    isPalindrome[i][j] = isPalindrome[i + 1][j - 1] && s.charAt(i) == s.charAt(j);
                }
            }
        }
        
        if(isPalindrome[0][n - 1]) {
            return 0;
        }
        
        // a b c d e
        // 0 1 2 3 4
        int[] min = new int[n];
        for(int i = 1; i < n; i++) {
            min[i] = i;
            for(int k = 0; k <= i; k++) {
                if(isPalindrome[k][i]) {
                    if(k == 0) {
                        min[i] = 0;
                        continue;
                    }
                    min[i] = Math.min(min[i], min[k - 1] + 1);
                }
            }
        }
        return min[n - 1];
    }
}