639. Decode Ways II

A message containing letters from A-Z is being encoded to numbers using the following mapping way:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Beyond that, now the encoded string can also contain the character '*', which can be treated as one of the numbers from 1 to 9.

Given the encoded message containing digits and the character '*', return the total number of ways to decode it.

Also, since the answer may be very large, you should return the output mod 109 + 7.

Example 1:
Input: "*"
Output: 9
Explanation: The encoded message can be decoded to the string: "A", "B", "C", "D", "E", "F", "G", "H", "I".
Example 2:
Input: "1*"
Output: 9 + 9 = 18
Note:
The length of the input string will fit in range [1, 105].
The input string will only contain the character '*' and digits '0' - '9'.

public class Solution {
    public int numDecodings(String s) {
        if(s == null || s.length() == 0) {
            return 0;
        }
        long[] dp = new long[s.length() + 1];
        int mod = 1000000007;
        dp[0] = 1;
        dp[1] = s.charAt(0) == '*'? 9: s.charAt(0) == '0'? 0: 1;
        for(int i = 2; i < dp.length; i++) {
            char c = s.charAt(i - 1);
            if(c == '*') {
                dp[i] += dp[i - 1] * 9 % mod;
                if(s.charAt(i - 2) == '*') {
                    dp[i] = (dp[i] + dp[i - 2] * 15) % mod;
                } else {
                    if(s.charAt(i - 2) == '1') {
                        dp[i] = (dp[i] + dp[i - 2] * 9) % mod;
                    } else if(s.charAt(i - 2) == '2') {
                        dp[i] = (dp[i] + dp[i - 2] * 6) % mod;
                    }
                }
            } else {
                if(c != '0') {
                    dp[i] += dp[i - 1];
                }
                if(s.charAt(i - 2) == '*') {
                    if(c - '0' <= 6 && c - '0' >= 0) {
                        dp[i] = (dp[i] + dp[i - 2] * 2) % mod;
                    } else {
                        dp[i] = (dp[i] + dp[i - 2]) % mod;
                    }
                } else {
                    if(Integer.parseInt(s.substring(i - 2, i)) >= 10 && Integer.parseInt(s.substring(i - 2, i)) <= 26) {
                        dp[i] = (dp[i] + dp[i - 2]) % mod;
                    }
                }
            }
        }
        return (int)dp[s.length()];
    }
}