410. Split Array Largest Sum

Given an array which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these m subarrays.

Note:
If n is the length of array, assume the following constraints are satisfied:

1 ≤ n ≤ 1000
1 ≤ m ≤ min(50, n)
Examples:

Input:
nums = [7,2,5,10,8]
m = 2

Output:
18

Explanation:
There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8],
where the largest sum among the two subarrays is only 18.

public class Solution {
    public int splitArray(int[] nums, int m) {
        int[][] dp = new int[nums.length][m];
        int[] sum = new int[nums.length];
        
        sum[0] = nums[0];
        for(int i = 1; i < nums.length; i++) {
            sum[i] = sum[i - 1] + nums[i];
        }
        
        for(int i = 0; i < nums.length; i++) {
            dp[i][0] = sum[i];
        }
        
        for(int cut = 1; cut <= m - 1; cut++) {
            for(int j = cut; j < nums.length; j++) {
                dp[j][cut] = Integer.MAX_VALUE;
                for(int k = 0; k < j; k++) {
                    dp[j][cut] = Math.min(dp[j][cut], Math.max(dp[k][cut - 1], sum[j] - sum[k]));
                }              
            }
        }
        return dp[nums.length - 1][m - 1];
    }
}