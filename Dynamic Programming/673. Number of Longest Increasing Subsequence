673. Number of Longest Increasing Subsequence

Given an unsorted array of integers, find the number of longest increasing subsequence.

Example 1:
Input: [1,3,5,4,7]
Output: 2
Explanation: The two longest increasing subsequence are [1, 3, 4, 7] and [1, 3, 5, 7].
Example 2:
Input: [2,2,2,2,2]
Output: 5
Explanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5.
Note: Length of the given array will be not exceed 2000 and the answer is guaranteed to be fit in 32-bit signed int.

class Solution {
    public int findNumberOfLIS(int[] nums) {
        if(nums == null || nums.length == 0) {
            return 0;
        }
        
        int n = nums.length;
        int[] dp = new int[n];
        int[] count = new int[n];
        int maxLength = 1;
        int result = 1;
        dp[0] = 1;
        count[0] = 1;
        for(int i = 1; i < nums.length; i++) {
            int currentLen = 1;
            int currentCount = 1;
            for(int j = 0; j < i; j++) {
                if(nums[j] < nums[i]) {
                    if(dp[j] + 1 == currentLen) {
                        currentCount += count[j];
                    } else if(dp[j] + 1 > currentLen) {
                        currentCount = count[j];
                        currentLen = dp[j] + 1;
                    }
                }
            }

            dp[i] = currentLen;
            count[i] = currentCount;
            if(currentLen == maxLength) {
                result += currentCount;
            } else if(currentLen > maxLength) {
                result = currentCount;
                maxLength = currentLen;
            }
        }
        return result;
    }
}