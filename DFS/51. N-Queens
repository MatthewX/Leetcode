51. N-Queens

The n-queens puzzle is the problem of placing n queens on an n√ón chessboard such that no two queens attack each other.



Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

For example,
There exist two distinct solutions to the 4-queens puzzle:

[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]

class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> result = new ArrayList<List<String>>();
        dfs(result, 0, new int[n], n);
        return result;
    }
    
    private void dfs(List<List<String>> result, int index, int[] flag, int n) {
        if(index == n) {
            List<String> list = new ArrayList<>();
            for(int i = 0; i < n; i++) {
                StringBuffer sb = new StringBuffer();
                for(int j = 0; j < n; j++) {
                    if(flag[i] == j) {
                        sb.append("Q");
                    } else {
                        sb.append(".");
                    }
                }
                list.add(sb.toString());
            }
            result.add(list);
            return;
        }
        for(int i = 0; i < n; i++) {
            if(isValid(flag, index, i)) {
                flag[index] = i;
                dfs(result, index + 1, flag, n);
            }
        }
    }
    private boolean isValid(int[] flag, int row, int column) {
        for(int i = 0; i < row; i++) {
            if(flag[i] == column) {
                return false;
            }
            int diff = row - i;
            if(Math.abs(column - flag[i]) == diff) {
                return false;
            }
        }
        return true;
    }
}