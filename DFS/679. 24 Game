679. 24 Game

You have 4 cards each containing a number from 1 to 9. You need to judge whether they could operated through *, /, +, -, (, ) to get the value of 24.

Example 1:
Input: [4, 1, 8, 7]
Output: True
Explanation: (8-4) * (7-1) = 24
Example 2:
Input: [1, 2, 1, 2]
Output: False
Note:
The division operator / represents real division, not integer division. For example, 4 / (1 - 2/3) = 12.
Every operation done is between two numbers. In particular, we cannot use - as a unary operator. For example, with [1, 1, 1, 1] as input, the expression -1 - 1 - 1 - 1 is not allowed.
You cannot concatenate numbers together. For example, if the input is [1, 2, 1, 2], we cannot write this as 12 + 12.

class Solution {
    private final double eps = 0.001;
    public boolean judgePoint24(int[] nums) {
        List<Double> arr = new ArrayList<>();
        for(int n: nums) arr.add((double) n);
        
        return dfs(arr);
    }
    
    private boolean dfs(List<Double> nums) {
        if(nums.size() == 1) {
            if(Math.abs(nums.get(0) - 24.0) < eps) {
                return true;
            }
            return false;
        }
        
        for(int i = 0; i < nums.size() - 1; i++) {
            for(int j = i + 1; j < nums.size(); j++) {
                double n1 = nums.get(i);
                double n2 = nums.get(j);
                List<Double> next = new ArrayList<>();
                next.addAll(Arrays.asList(n1 + n2, n1 - n2, n2 - n1, n1 * n2));
                if(Math.abs(n2) > eps)  next.add(n1 / n2);
                if(Math.abs(n1) > eps)  next.add(n2 / n1);
                nums.remove(j);
                nums.remove(i);
                for (Double n: next){
                    nums.add(n);
                    if(dfs(nums)) {
                    	return true;
                    }
                    nums.remove(nums.size() - 1);
                }
                nums.add(i, n1);
                nums.add(j, n2);
            }
        }
        return false;
    }
}