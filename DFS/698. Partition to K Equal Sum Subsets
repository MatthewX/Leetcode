698. Partition to K Equal Sum Subsets

Given an array of integers nums and a positive integer k, find whether it's possible to divide this array into k non-empty subsets whose sums are all equal.

Example 1:
Input: nums = [4, 3, 2, 3, 5, 2, 1], k = 4
Output: True
Explanation: It's possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.
Note:

1 <= k <= len(nums) <= 16.
0 < nums[i] < 10000.


class Solution {
    public boolean canPartitionKSubsets(int[] nums, int k) {
        if(nums == null || nums.length < k) {
            return false;
        }
        int sum = 0;
        for(int i: nums) {
            sum += i;
        }
        if(sum % k != 0) {
            return false;
        }
        sum /= k;
        boolean[] visited = new boolean[nums.length];
        return dfs(nums, k, visited, sum, 0, 0);
    }
    
    private boolean dfs(int[] nums, int k, boolean[] visited, int sum, int currentSum, int start) {
        if(currentSum > sum) {
            return false;
        }
        if(k == 1) {
            return true;
        }
        if(currentSum == sum) {
            return dfs(nums, k - 1, visited, sum, 0, 0);
        }
        for(int i = start; i < nums.length; i++) {
            if(!visited[i]) {
                visited[i] = true;
                if(dfs(nums, k, visited, sum, currentSum + nums[i], start + 1)) {
                    return true;
                }
                visited[i] = false;
            }
        }
        return false;
    }
}
