756. Pyramid Transition Matrix

We are stacking blocks to form a pyramid. Each block has a color which is a one letter string, like `'Z'`.

For every block of color `C` we place not in the bottom row, we are placing it on top of a left block of color `A` and right block of color `B`. We are allowed to place the block there only if `(A, B, C)` is an allowed triple.

We start with a bottom row of bottom, represented as a single string. We also start with a list of allowed triples allowed. Each allowed triple is represented as a string of length 3.

Return true if we can build the pyramid all the way to the top, otherwise false.

Example 1:
Input: bottom = "XYZ", allowed = ["XYD", "YZE", "DEA", "FFF"]
Output: true
Explanation:
We can stack the pyramid like this:
    A
   / \
  D   E
 / \ / \
X   Y   Z

This works because ('X', 'Y', 'D'), ('Y', 'Z', 'E'), and ('D', 'E', 'A') are allowed triples.
Example 2:
Input: bottom = "XXYX", allowed = ["XXX", "XXY", "XYX", "XYY", "YXZ"]
Output: false
Explanation:
We can't stack the pyramid to the top.
Note that there could be allowed triples (A, B, C) and (A, B, D) with C != D.
Note:
bottom will be a string with length in range [2, 8].
allowed will have length in range [0, 200].
Letters in all strings will be chosen from the set {'A', 'B', 'C', 'D', 'E', 'F', 'G'}.


class Solution {
    public boolean pyramidTransition(String bottom, List<String> allowed) {
        if(bottom == null || bottom.length() == 0 || allowed == null || allowed.size() == 0) {
            return false;
        }
        
        Map<String, Set<Character>> map = new HashMap<>();
        for(String s: allowed) {
            String prefix = s.substring(0, 2);
            Set<Character> set = map.getOrDefault(prefix, new HashSet<>());
            set.add(s.charAt(2));
            map.put(prefix, set);
        }
        
        return dfs(bottom, map);
        
    }
    
    private boolean dfs(String current, Map<String, Set<Character>> map) {
        if(current.length() == 1) {
            return true;
        }
        List<String> nextList = getNextLevel(current, map);
        
        for(String next: nextList) {
            if(dfs(next, map)) {
                return true;
            }
        }
        return false;
        
    }
    
    private List<String> getNextLevel(String current, Map<String, Set<Character>> map) {
        List<String> list = new ArrayList<>();
        Queue<String> queue = new LinkedList<>();
        queue.offer("");
        int i = 0;
        for(; i < current.length() - 1; i++) {
            String prefix = current.substring(i, i + 2);
            Set<Character> set = map.get(prefix);
            if(set == null) return list;
            int size = queue.size();
            for(int j = 0; j < size; j++) {
                String s = queue.poll();
                for(char c: set) {
                    queue.offer(s + c);
                }
            }
            
        }
        
        for(String s: queue) {
            list.add(s);
        }
        return list;
        
        
    }
}