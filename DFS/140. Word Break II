140. Word Break II

Given a string s and a dictionary of words dict, add spaces in s to construct a sentence where each word is a valid dictionary word.

Return all such possible sentences.

For example, given
s = "catsanddog",
dict = ["cat", "cats", "and", "sand", "dog"].

A solution is ["cats and dog", "cat sand dog"].


dfs+memorization
class Solution {
    public List<String> wordBreak(String s, List<String> wordDict) {
        List<String> result = new ArrayList<>();
        if(s == null || wordDict == null || wordDict.isEmpty()) {
            return result;
        }
        Set<String> dict = new HashSet<>();
        for(String str: wordDict) {
            dict.add(str);
        }
        return dfs(s, dict, new HashMap<String, List<String>>());
    }
    
    private List<String> dfs(String s, Set<String> dict, Map<String, List<String>> map) {
        if(map.containsKey(s)) {
            return map.get(s);
        }
        List<String> result = new ArrayList<>();
        if(s.equals("")) {
            result.add("");
            return result;
        }
        for(int i = 0; i < s.length(); i++) {
            String cur = s.substring(0, i + 1);
            if(dict.contains(cur)) {
                List<String> subList = dfs(s.substring(i + 1), dict, map);
                for(String str: subList) {
                    if(str.length() == 0) {
                        result.add(cur + str);
                    } else {
                        result.add(cur + " " + str);
                    }
                }
            }
        }
        map.put(s, result);
        return result;
    }
}


public class Solution {
    public List<String> wordBreak(String s, Set<String> dict) {
        ArrayList<String> result = new ArrayList<String>();  
        if(s == null || s.length() == 0) return result;  
        ArrayList<String> list = new ArrayList<String>();  
        helper(s, dict, result, 0, list);  
        return result;  
    }  
    private void helper(String s, Set<String> dict, ArrayList<String> result, int start, ArrayList<String> list){  
        if(start == s.length()){  
            StringBuffer sb = new StringBuffer();  
            for(int i = 0; i < list.size() - 1; i++){  
                sb.append(list.get(i) + " ");  
            }  
            sb.append(list.get(list.size() - 1));  
            result.add(sb.toString());  
            return;  
        }  
        for(int i = start; i < s.length(); i++){  
            String cur = s.substring(start, i + 1);  
            if(dict.contains(cur)){  
                list.add(cur);  
                helper(s, dict, result, i + 1, list);  
                list.remove(list.size() - 1);  
            }  
        }  
    }
}
