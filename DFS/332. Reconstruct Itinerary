332. Reconstruct Itinerary

Given a list of airline tickets represented by pairs of departure and arrival airports [from, to], reconstruct the itinerary in order. All of the tickets belong to a man who departs from JFK. Thus, the itinerary must begin with JFK.

Note:
If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary ["JFK", "LGA"] has a smaller lexical order than ["JFK", "LGB"].
All airports are represented by three capital letters (IATA code).
You may assume all tickets form at least one valid itinerary.
Example 1:
tickets = [["MUC", "LHR"], ["JFK", "MUC"], ["SFO", "SJC"], ["LHR", "SFO"]]
Return ["JFK", "MUC", "LHR", "SFO", "SJC"].
Example 2:
tickets = [["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]
Return ["JFK","ATL","JFK","SFO","ATL","SFO"].
Another possible reconstruction is ["JFK","SFO","ATL","JFK","ATL","SFO"]. But it is larger in lexical order.

Credits:
Special thanks to @dietpepsi for adding this problem and creating all test cases.

class Solution {
    public List<String> findItinerary(String[][] tickets) {
        List<String> result = new ArrayList<String>();
        if(tickets == null || tickets.length == 0 || tickets[0].length == 0) {
            return result;
        }
        // build graph
        Map<String, PriorityQueue<String>> graph = new HashMap<>();
        for(String[] ticket: tickets) {
            if(!graph.containsKey(ticket[0])) {
                PriorityQueue<String> pq = new PriorityQueue<>();
                graph.put(ticket[0], pq);
            }
            graph.get(ticket[0]).offer(ticket[1]);
        }
        
        dfs(graph, result, "JFK");
        return result;    
    }
    
    private void dfs(Map<String, PriorityQueue<String>> graph, List<String> result, String airport) {
        PriorityQueue<String> arrivals = graph.get(airport);
        while (arrivals != null && !arrivals.isEmpty())
            dfs(graph, result, arrivals.poll());
        result.add(0, airport);
    }
    
}