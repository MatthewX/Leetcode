632. Smallest Range

You have k lists of sorted integers in ascending order. Find the smallest range that includes at least one number from each of the k lists.

We define the range [a,b] is smaller than range [c,d] if b-a < d-c or a < c if b-a == d-c.

Example 1:
Input:[[4,10,15,24,26], [0,9,12,20], [5,18,22,30]]
Output: [20,24]
Explanation: 
List 1: [4, 10, 15, 24,26], 24 is in range [20,24].
List 2: [0, 9, 12, 20], 20 is in range [20,24].
List 3: [5, 18, 22, 30], 22 is in range [20,24].
Note:
The given list may contain duplicates, so ascending order means >= here.
1 <= k <= 3500
-105 <= value of elements <= 105.
For Java users, please note that the input type has been changed to List<List<Integer>>. And after you reset the code template, you'll see this point.

class Solution {
    public int[] smallestRange(List<List<Integer>> nums) {
        if(nums == null || nums.isEmpty() || nums.get(0).isEmpty()) {
            return null;
        }
        List<int[]> list = new ArrayList<int[]>();
        for(int i = 0; i < nums.size(); i++) {
            for(int j = 0; j < nums.get(i).size(); j++) {
                list.add(new int[]{nums.get(i).get(j), i});
            }
        }
        Collections.sort(list, new Comparator<int[]>(){
            public int compare(int[] i1, int[] i2) {
                return i1[0] - i2[0];
            }
        });

        int[] count = new int[nums.size()];
        int n = 0;
        
        int start = 0;
        int[] result = new int[2];
        result[0] = 0;
        result[1] = Integer.MAX_VALUE;
        for(int i = 0; i < list.size(); i++) {
            int[] current = list.get(i);
            if(count[current[1]] == 0) {
                n++;
            }
            count[current[1]]++;
            if(n == nums.size()) {
                while(start < i) {
                    int[] left = list.get(start);
                    if(count[left[1]] > 1) {
                        count[left[1]]--;
                        start++;
                    } else {
                        break;
                    }
                }
                if(list.get(i)[0] - list.get(start)[0] < result[1] - result[0]) {
                    result[0] = list.get(start)[0];
                    result[1] = list.get(i)[0];
                }
            }
            
        }
        return result;
    }
}