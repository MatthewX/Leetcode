763. Partition Labels

A string S of lowercase letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.

Example 1:
Input: S = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.
Note:

S will have length in range [1, 500].
S will consist of lowercase letters ('a' to 'z') only.

class Solution {
    public List<Integer> partitionLabels(String S) {
        List<Integer> result = new ArrayList<>();
        if(S == null || S.length() == 0) {
            return result;
        }
        Interval[] intervals = new Interval[26];
        for(int i = 0; i < S.length(); i++) {
            char c = S.charAt(i);
            if(intervals[c - 'a'] == null) {
                intervals[c - 'a'] = new Interval(i, i);
            } else {
                intervals[c - 'a'].end = i;
            }
        }
        List<Interval> list = new ArrayList<>();
        for(Interval i: intervals) {
            if(i != null) {
                list.add(i);
            }
        }
        Collections.sort(list, new Comparator<Interval>(){
            public int compare(Interval i1, Interval i2) {
                return i1.start - i2.start;
            }
        });
        
        Interval prev = list.get(0);
        for(int i = 1; i < list.size(); i++) {
            Interval current = list.get(i);
            if(current.start <= prev.end) {
                prev.end = Math.max(current.end, prev.end);
            } else {
                result.add(prev.end - prev.start + 1);
                prev = current;
            }
        }
        result.add(prev.end - prev.start + 1);
        return result;
        
        
        
        
    }
    
    class Interval {
        int start;
        int end;
        public Interval(int start, int end) {
            this.start = start;
            this.end = end;
        }
    }
}