681. Next Closest Time

Given a time represented in the format "HH:MM", form the next closest time by reusing the current digits. There is no limit on how many times a digit can be reused.

You may assume the given input string is always valid. For example, "01:34", "12:09" are all valid. "1:34", "12:9" are all invalid.

Example 1:

Input: "19:34"
Output: "19:39"
Explanation: The next closest time choosing from digits 1, 9, 3, 4, is 19:39, which occurs 5 minutes later.  It is not 19:33, because this occurs 23 hours and 59 minutes later.
Example 2:

Input: "23:59"
Output: "22:22"
Explanation: The next closest time choosing from digits 2, 3, 5, 9, is 22:22. It may be assumed that the returned time is next day's time since it is smaller than the input time numerically.

class Solution {
    public String nextClosestTime(String time) {
        if(time == null || time.length() == 0) {
            return "";
        }
        int[] num = new int[4];
        int j = 0;
        for(int i = 0; i < time.length(); i++) {
            if(time.charAt(i) != ':') {
                num[j++] = time.charAt(i) - '0';
            }
        }
        Arrays.sort(num);
        boolean found = false;
        
        int one = time.charAt(4) - '0', two = time.charAt(3) - '0', three = time.charAt(1) - '0', four = time.charAt(0) - '0';
        int i = 0;
        j = 0;
        if(one < 9) {
            for(; i < num.length; i++) {
                if(num[i] > one) {
                    j = 4;
                    found = true;
                    break;
                }
            }
        }
        
        if(!found && two < 5) {
            for(i = 0; i < num.length; i++) {
                if(num[i] > two && num[i] < 6) {
                    j = 3;
                    found = true;
                    break;
                }
            }
        }
        
        if(!found && ((four <= 1 && three < 9) || (four == 2 && three < 3))) {
            for(i = 0; i < num.length; i++) {
                if(num[i] > three) {
                    j = 1;
                    found = true;
                    break;
                }
            }
        }
        
        if(!found && four < 2) {
            for(i = 0; i < num.length; i++) {
                if(num[i] > four && num[i] < 3) {
                    j = 0;
                    found = true;
                    break;
                }
            }
        }
        if(!found) {
            i = 0;
        }
        String s = time.substring(0, j);
        System.out.println("i is:" + i + ", j is:" + j);
        for(int k = j; k < time.length(); k++) {
            if(k == 2) {
                s = s + ":";
            } else if(k == j) {
                s = s + num[i];
            } else {
                s = s + num[0];
            }
        }

        return s;
    }
}