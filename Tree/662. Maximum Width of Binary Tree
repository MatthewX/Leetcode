662. Maximum Width of Binary Tree

Given a binary tree, write a function to get the maximum width of the given tree. The width of a tree is the maximum width among all levels. The binary tree has the same structure as a full binary tree, but some nodes are null.

The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation.

Example 1:
Input: 

           1
         /   \
        3     2
       / \     \  
      5   3     9 

Output: 4
Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).
Example 2:
Input: 

          1
         /  
        3    
       / \       
      5   3     

Output: 2
Explanation: The maximum width existing in the third level with the length 2 (5,3).
Example 3:
Input: 

          1
         / \
        3   2 
       /        
      5      

Output: 2
Explanation: The maximum width existing in the second level with the length 2 (3,2).
Example 4:
Input: 

          1
         / \
        3   2
       /     \  
      5       9 
     /         \
    6           7
Output: 8
Explanation:The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if(root == null) {
            return 0;
        }
        
        Queue<TreeNode> queue1 = new LinkedList<>();
        Queue<Integer> queue2 = new LinkedList<>();
        queue1.offer(root);
        queue2.offer(1);
        int result = 1;
        
        while(!queue1.isEmpty()) {
            int size = queue1.size();
            int left = 0;
            int right = 0;
            for(int i = 0; i < size; i++) {
                TreeNode current = queue1.poll();
                int currentIndex = queue2.poll();
                if(i == 0) {
                    left = currentIndex;
                }
                
                if(i == size - 1) {
                    right = currentIndex;
                }
                if(current.left != null) {
                    queue1.offer(current.left);
                    queue2.offer(currentIndex * 2 - 1);
                }
                if(current.right != null) {
                    queue1.offer(current.right);
                    queue2.offer(currentIndex * 2);
                }
            }
            result = Math.max(result, right - left + 1);
        }
        return result;
        
    }
}