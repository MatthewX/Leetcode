742. Closest Leaf in a Binary Tree

Given a binary tree where every node has a unique value, and a target key k, find the value of the nearest leaf node to target k in the tree.

Here, nearest to a leaf means the least number of edges travelled on the binary tree to reach any leaf of the tree. Also, a node is called a leaf if it has no children.

In the following examples, the input tree is represented in flattened form row by row. The actual root tree given will be a TreeNode object.

Example 1:

Input:
root = [1, 3, 2], k = 1
Diagram of binary tree:
          1
         / \
        3   2

Output: 2 (or 3)

Explanation: Either 2 or 3 is the nearest leaf node to the target of 1.
Example 2:

Input:
root = [1], k = 1
Output: 1

Explanation: The nearest leaf node is the root node itself.
Example 3:

Input:
root = [1,2,3,4,null,null,null,5,null,6], k = 2
Diagram of binary tree:
             1
            / \
           2   3
          /
         4
        /
       5
      /
     6

Output: 3
Explanation: The leaf node with value 3 (and not the leaf node with value 6) is nearest to the node with value 2.
Note:
root represents a binary tree with at least 1 node and at most 1000 nodes.
Every node has a unique node.val in range [1, 1000].
There exists some node in the given binary tree for which node.val == k.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int findClosestLeaf(TreeNode root, int k) {
        if(root == null) {
            return 0;
        }
        Map<TreeNode, Integer> map = new HashMap<>();
        Map<TreeNode, Integer> nodeId = new HashMap<>();
        updateDistance(root, map, nodeId);
        TreeNode node = findClosest(root, k, map, nodeId);
        return nodeId.get(node);
    }
    
    private int updateDistance(TreeNode root, Map<TreeNode, Integer> map,  Map<TreeNode, Integer> nodeId) {
        if(root == null) {
            return Integer.MAX_VALUE;
        }
        if(root.left == null && root.right == null) {
            map.put(root, 0);
            nodeId.put(root, root.val);
            return 0;
        }
        int left = updateDistance(root.left, map, nodeId);
        int right = updateDistance(root.right, map, nodeId);
        if(left < right) {
            map.put(root, left + 1);
            nodeId.put(root, nodeId.get(root.left));
        } else {
            map.put(root, right + 1);
            nodeId.put(root, nodeId.get(root.right));
        }
        return Math.min(left, right) + 1;
    }
    
    private TreeNode findClosest(TreeNode root, int k, Map<TreeNode, Integer> map, Map<TreeNode, Integer> nodeId) {
        if(root == null) {
            return root;
        }
        if(root.val == k) {
            return root;
        }

        if(root.left != null) {
            if(map.get(root.left) > map.get(root) + 1) {
                map.put(root.left, map.get(root) + 1);
                nodeId.put(root.left, nodeId.get(root));
            }
            TreeNode left = findClosest(root.left, k, map, nodeId);
            if(left != null) return left;
        }
        if(root.right != null) {
            if(map.get(root.right) > map.get(root) + 1) {
                map.put(root.right, map.get(root) + 1);
                nodeId.put(root.right, nodeId.get(root));
            }
            TreeNode right = findClosest(root.right, k, map, nodeId);
            if(right != null) return right;
        }
        return null;
    }
    
}