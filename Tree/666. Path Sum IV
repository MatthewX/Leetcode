666. Path Sum IV

If the depth of a tree is smaller than 5, then this tree can be represented by a list of three-digits integers.

For each integer in this list:
The hundreds digit represents the depth D of this node, 1 <= D <= 4.
The tens digit represents the position P of this node in the level it belongs to, 1 <= P <= 8. The position is the same as that in a full binary tree.
The units digit represents the value V of this node, 0 <= V <= 9.
Given a list of ascending three-digits integers representing a binary with the depth smaller than 5. You need to return the sum of all paths from the root towards the leaves.

Example 1:
Input: [113, 215, 221]
Output: 12
Explanation: 
The tree that the list represents is:
    3
   / \
  5   1

The path sum is (3 + 5) + (3 + 1) = 12.
Example 2:
Input: [113, 221]
Output: 4
Explanation: 
The tree that the list represents is: 
    3
     \
      1

The path sum is (3 + 1) = 4.

class Solution {
    public int pathSum(int[] nums) {
        if(nums == null || nums.length == 0) {
            return 0;
        }
        
        Map<Integer, int[]> map = new HashMap<>();
        for(int i = nums.length - 1; i >= 0; i--) {
        	int current = nums[i];
        	int child1 = (current / 100 + 1) * 10 + (current / 10 % 10) * 2 - 1;
        	int child2 = (current / 100 + 1) * 10 + (current / 10 % 10) * 2;
            int twoDigits = current / 10;
            if(map.containsKey(child1) || map.containsKey(child2)) {
            	map.put(twoDigits, new int[]{0, current % 100 % 10});
            } else {
            	map.put(twoDigits, new int[]{1, current % 100 % 10});
            }
            
        }
        
        for(int i = nums.length - 1; i >= 1; i--) {
            int current = nums[i];
            int parent = (current / 100 - 1) * 10 + (current / 10 % 10 + 1) / 2;
            int[] parentCount = map.get(parent);
            int[] currentCount = map.get(current / 10);
            parentCount[0] += currentCount[0];
            map.put(parent, parentCount);
        }
        
        int result = 0;
        for(int[] value: map.values()) {
            result += value[0] * value[1];
        }
        return result;
    }
}