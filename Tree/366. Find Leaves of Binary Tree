366. Find Leaves of Binary Tree

Given a binary tree, collect a tree's nodes as if you were doing this: Collect and remove all leaves, repeat until the tree is empty.

Example:
Given binary tree 
          1
         / \
        2   3
       / \     
      4   5    
Returns [4, 5, 3], [2], [1].

Explanation:
1. Removing the leaves [4, 5, 3] would result in this tree:

          1
         / 
        2          
2. Now removing the leaf [2] would result in this tree:

          1          
3. Now removing the leaf [1] would result in the empty tree:

          []         
Returns [4, 5, 3], [2], [1].

Credits:
Special thanks to @elmirap for adding this problem and creating all test cases.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> findLeaves(TreeNode root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if(root == null) {
            return result;
        }
        getLevel(root, result);
        return result;
    }
    
    private int getLevel(TreeNode root, List<List<Integer>> result) {
        if(root == null) {
            return -1;
        }
        int left = getLevel(root.left, result);
        int right = getLevel(root.right, result);
        
        int currentLevel = Math.max(left, right) + 1;
        if(result.size() - 1 < currentLevel) {
            result.add(new ArrayList<Integer>());
        }
        result.get(currentLevel).add(root.val);
        return currentLevel;
    }
}