697. Degree of an Array

Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

Example 1:
Input: [1, 2, 2, 3, 1]
Output: 2
Explanation: 
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.
Example 2:
Input: [1,2,2,3,1,4,2]
Output: 6
Note:

nums.length will be between 1 and 50,000.
nums[i] will be an integer between 0 and 49,999.

class Solution {
    public int findShortestSubArray(int[] nums) {
        if(nums == null || nums.length == 0) {
            return 0;
        }
        Map<Integer, Integer> map = new HashMap<>();
        Map<Integer, Integer[]> position = new HashMap<>();
        for(int i = 0; i < nums.length; i++) {
            int freq = map.getOrDefault(nums[i], 0);
            map.put(nums[i], freq + 1);
            if(!position.containsKey(nums[i])) {
                position.put(nums[i], new Integer[]{i, i});
            } else {
                position.get(nums[i])[1] = i;
            }
        }
        
        int result = Integer.MAX_VALUE;
        int maxFreq = 0;
        for(int key: map.keySet()) {
            if(map.get(key) > maxFreq) {
                maxFreq = map.get(key);
                result = position.get(key)[1] - position.get(key)[0] + 1;
            } else if(map.get(key) == maxFreq) {
                result = Math.min(position.get(key)[1] - position.get(key)[0] + 1, result);
            }
        }
        return result;
        
    }
}