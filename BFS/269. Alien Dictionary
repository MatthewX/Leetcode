269. Alien Dictionary

There is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. You receive a list of non-empty words from the dictionary, where words are sorted lexicographically by the rules of this new language. Derive the order of letters in this language.

Example 1:
Given the following words in dictionary,

[
  "wrt",
  "wrf",
  "er",
  "ett",
  "rftt"
]
The correct order is: "wertf".

Example 2:
Given the following words in dictionary,

[
  "z",
  "x"
]
The correct order is: "zx".

Example 3:
Given the following words in dictionary,

[
  "z",
  "x",
  "z"
]
The order is invalid, so return "".

Note:
You may assume all letters are in lowercase.
You may assume that if a is a prefix of b, then a must appear before b in the given dictionary.
If the order is invalid, return an empty string.
There may be multiple valid order of letters, return any one of them is fine.

class Solution {
    public String alienOrder(String[] words) {
        if(words == null || words.length == 0) {
            return "";
        }
        Map<Character, Integer> degree = new HashMap<>();
        Map<Character, Set<Character>> map = new HashMap<>();
        for(String s: words){
            for(char c: s.toCharArray()){
                degree.put(c, 0);
            }
        }
        for(int i = 0; i < words.length - 1; i++) {
            String first = words[i];
            String second = words[i + 1];
            int j = 0;
            while(j < first.length() && j < second.length()) {
                char c1 = first.charAt(j), c2 = second.charAt(j);
                if(c1 != c2) {
                    addToGraph(c1, c2, map, degree);
                    break;
                } else {
                    j++;
                }
            }
        }
        
        // Setup
        Queue<Character> queue = new LinkedList<Character>();
        for(char c: degree.keySet()) {
            if(degree.get(c) == 0) {
                queue.offer(c);
            }
        }
        StringBuffer result = new StringBuffer();
        while(!queue.isEmpty()) {
            char c = queue.poll();
            result.append(c);
            if(map.get(c) == null) {
                continue;
            }
            for(char neighbor: map.get(c)) {
                degree.put(neighbor, degree.get(neighbor) - 1);
                if(degree.get(neighbor) == 0) {
                    queue.offer(neighbor);
                }
            }
        }
        if(result.length() == degree.size()) {
            return result.toString();
        }
        return "";
        
    }
    private void addToGraph(char c1, char c2, Map<Character, Set<Character>> map, Map<Character, Integer> degree) {
        Set<Character> set = map.getOrDefault(c1, new HashSet<Character>());
        if(!set.contains(c2)) {
            set.add(c2);
            map.put(c1, set);
            degree.put(c2, degree.get(c2) + 1);
        }
    }
}