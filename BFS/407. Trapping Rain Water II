407. Trapping Rain Water II

Given an m x n matrix of positive integers representing the height of each unit cell in a 2D elevation map, compute the volume of water it is able to trap after raining.

Note:
Both m and n are less than 110. The height of each unit cell is greater than 0 and is less than 20,000.

Example:

Given the following 3x6 height map:
[
  [1,4,3,1,3,2],
  [3,2,1,3,2,4],
  [2,3,3,2,3,1]
]

Return 4.

class Solution {
    public int trapRainWater(int[][] heightMap) {
        if(heightMap == null || heightMap.length == 0 || heightMap[0].length == 0) {
            return 0;
        }
        int m = heightMap.length, n = heightMap[0].length;
        PriorityQueue<int[]> pq = new PriorityQueue<int[]>(new Comparator<int[]>(){
            public int compare(int[] a1, int[] a2) {
                return heightMap[a1[0]][a1[1]] - heightMap[a2[0]][a2[1]];
            }
        });
        boolean[][] visited = new boolean[m][n];
        for(int i = 0; i < m; i++) {
            visited[i][0] = true;
            visited[i][n - 1] = true;
            pq.offer(new int[]{i, 0});
            pq.offer(new int[]{i, n - 1});
        }
        for(int j = 1; j < n - 1; j++) {
            visited[0][j] = true;
            visited[m - 1][j] = true;
            pq.offer(new int[]{0, j});
            pq.offer(new int[]{m - 1, j});
        }
        
        int[] dx = {1, -1, 0, 0};
        int[] dy = {0, 0, 1, -1};
        
        int result = 0;
        while(!pq.isEmpty()) {
            int[] current = pq.poll();
            for(int i = 0; i < dx.length; i++) {                
                int newX = current[0] + dx[i];
                int newY = current[1] + dy[i];
                if(newX >= 0 && newX < m && newY >= 0 && newY < n && !visited[newX][newY]) {
                    visited[newX][newY] = true;
                    if(heightMap[newX][newY] < heightMap[current[0]][current[1]]) {
                        result += heightMap[current[0]][current[1]] - heightMap[newX][newY];
                        heightMap[newX][newY] = heightMap[current[0]][current[1]];
                    }
                    pq.offer(new int[]{newX, newY});
                }
            }
        }
        return result;
    }
}