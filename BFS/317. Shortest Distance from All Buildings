317. Shortest Distance from All Buildings

You want to build a house on an empty land which reaches all buildings in the shortest amount of distance. You can only move up, down, left and right. You are given a 2D grid of values 0, 1 or 2, where:

Each 0 marks an empty land which you can pass by freely.
Each 1 marks a building which you cannot pass through.
Each 2 marks an obstacle which you cannot pass through.
For example, given three buildings at (0,0), (0,4), (2,2), and an obstacle at (0,2):

1 - 0 - 2 - 0 - 1
|   |   |   |   |
0 - 0 - 0 - 0 - 0
|   |   |   |   |
0 - 0 - 1 - 0 - 0
The point (1,2) is an ideal empty land to build a house, as the total travel distance of 3+3+1=7 is minimal. So return 7.

Note:
There will be at least one building. If it is not possible to build such house according to the above rules, return -1.

class Solution {
    public int shortestDistance(int[][] grid) {
        if(grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }
        int m = grid.length;
        int n = grid[0].length;
        int building = 0;
        int[][] reach = new int[m][n];
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == 1) {
                    building++;
                    boolean[][] used = new boolean[m][n];
                    bfs(grid, i, j, used, reach);
                }
            }
        }
        int result = Integer.MIN_VALUE;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] < 0 && grid[i][j] > result && reach[i][j] == building) {
                    result = grid[i][j];
                }
            }
        }
        
        return result == Integer.MIN_VALUE? -1: Math.abs(result);
    }
    
    private static void bfs(int[][] grid, int i, int j, boolean[][] used, int[][] reach) {
	        
	        Queue<Integer> queue = new LinkedList<Integer>();
	        queue.offer(i * grid[0].length + j);
	        int dis = 0;
	        used[i][j] = true;
	        while(!queue.isEmpty()) {
	            int size = queue.size();
	            for(int k = 0; k < size; k++) {
	                int current = queue.poll();
	                int x = current / grid[0].length;
	                int y = current % grid[0].length;
	                grid[x][y] -= dis;
	            
	                if(x - 1 >= 0 && !used[x - 1][y] && grid[x - 1][y] != 1 && grid[x - 1][y] != 2) {
                        reach[x - 1][y]++;
	                	used[x - 1][y] = true;
	                    queue.offer((x - 1) * grid[0].length + y);
	                }
	                if(x + 1 < grid.length && !used[x + 1][y] && grid[x + 1][y] != 1 && grid[x + 1][y] != 2) {
                        reach[x + 1][y]++;
	                	used[x + 1][y] = true;
	                    queue.offer((x + 1) * grid[0].length + y);
	                }
	                if(y - 1 >= 0 && !used[x][y - 1] && grid[x][y - 1] != 1 && grid[x][y - 1] != 2) {
                        reach[x][y - 1]++;
	                	used[x][y - 1] = true;
	                    queue.offer(x * grid[0].length + y - 1);
	                }
	                if(y + 1 < grid[0].length && !used[x][y + 1] && grid[x][y + 1] != 1 && grid[x][y + 1] != 2) {
                        reach[x][y + 1]++;
	                	used[x][y + 1] = true;
	                    queue.offer(x * grid[0].length + y + 1);
	                }
	            }
	            dis++;
	        }
	        
	    
        
    }
}