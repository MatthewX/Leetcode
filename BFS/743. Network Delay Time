743. Network Delay Time

There are N network nodes, labelled 1 to N.

Given times, a list of travel times as directed edges times[i] = (u, v, w), where u is the source node, v is the target node, and w is the time it takes for a signal to travel from source to target.

Now, we send a signal from a certain node K. How long will it take for all nodes to receive the signal? If it is impossible, return -1.

Note:
N will be in the range [1, 100].
K will be in the range [1, N].
The length of times will be in the range [1, 6000].
All edges times[i] = (u, v, w) will have 1 <= u, v <= N and 1 <= w <= 100.

class Solution {
    public int networkDelayTime(int[][] times, int N, int K) {
        if(times == null || times.length == 0 || times[0].length == 0 || N <= 0 || K <= 0) {
            return -1;
        }
        
        Map<Integer, Map<Integer, Integer>> graph = new HashMap<>();
        Map<Integer, Integer> time = new HashMap<>();
        for(int i = 1; i <= N; i++) {
            time.put(i, Integer.MAX_VALUE);
            graph.put(i, new HashMap<>());
        }
        for(int[] t: times) {
            Map<Integer, Integer> map = graph.get(t[0]);
            map.put(t[1], t[2]);
            graph.put(t[0], map);
        }
        time.put(K, 0);
        
        Queue<Integer> queue = new LinkedList<Integer>();
        queue.offer(K);
        int result = 0;
        while(!queue.isEmpty()) {
            int current = queue.poll();
            Map<Integer, Integer> neighbors = graph.get(current);
            for(int neighbor: neighbors.keySet()) {
                if(time.get(neighbor) > time.get(current) + neighbors.get(neighbor)) {
                    time.put(neighbor, time.get(current) + neighbors.get(neighbor));
                    queue.offer(neighbor);
                }
            }
        }
        
        for(int t: time.values()) {
            if(t == Integer.MAX_VALUE) return -1;
            result = Math.max(t, result);
        }
        return result;
        
    }
}