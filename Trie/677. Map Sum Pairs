677. Map Sum Pairs

Implement a MapSum class with insert, and sum methods.

For the method insert, you'll be given a pair of (string, integer). The string represents the key and the integer represents the value. If the key already existed, then the original key-value pair will be overridden to the new one.

For the method sum, you'll be given a string representing the prefix, and you need to return the sum of all the pairs' value whose key starts with the prefix.

Example 1:
Input: insert("apple", 3), Output: Null
Input: sum("ap"), Output: 3
Input: insert("app", 2), Output: Null
Input: sum("ap"), Output: 5

public class MapSum {

    /** Initialize your data structure here. */
    private TrieNode root;
    public MapSum() {
        root = new TrieNode();
    }
    
    public void insert(String key, int val) {
        if(key == null || key.length() == 0) {
            return;
        }
        TrieNode current = root;
        for(int i = 0; i < key.length(); i++) {
            char c = key.charAt(i);
            TrieNode next = current.children.get(c);
            if(next == null) {
                next = new TrieNode();
                current.children.put(c, next);
            }
            current = next;
        }
        current.isEnd = true;
        current.value = val;
    }

    public int sum(String prefix) {
        TrieNode current = root;
        for(int i = 0; i < prefix.length(); i++) {
            char c = prefix.charAt(i);
            TrieNode next = current.children.get(c);
            if(next == null) {
                return 0;
            }
            current = next;
        }
        return dfs(current);
    }
    
    
    private int dfs(TrieNode current) {
        int sum = 0;
        for(char c: current.children.keySet()) {
            sum += dfs(current.children.get(c));
        }
        return sum + current.value;
    }
    
    public class TrieNode {
    // Initialize your data structure here.
        public HashMap<Character, TrieNode> children;
        public boolean isEnd;
        public int value;
        public TrieNode() {
            children = new HashMap<Character, TrieNode>();
            isEnd = false;
            value = 0;
        }
    }
}

/**
 * Your MapSum object will be instantiated and called as such:
 * MapSum obj = new MapSum();
 * obj.insert(key,val);
 * int param_2 = obj.sum(prefix);
 */ 