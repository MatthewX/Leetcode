212. Word Search II

Given a 2D board and a list of words from the dictionary, find all words in the board.

Each word must be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

For example,
Given words = ["oath","pea","eat","rain"] and board =

[
  ['o','a','a','n'],
  ['e','t','a','e'],
  ['i','h','k','r'],
  ['i','f','l','v']
]
Return ["eat","oath"].

public class Solution {
	public class TrieNode {
		private HashMap<Character, TrieNode> children;
		private boolean endOfWord;
		public TrieNode() {
			children = new HashMap<Character, TrieNode>();
			endOfWord = false;
		}
		public HashMap<Character, TrieNode> getChildren() {
			return children;
		}
		public boolean isEnd() {
			return endOfWord;
		}
		public void seEnd() {
			endOfWord = true;
		}
	}
	public class Trie {
		private TrieNode root;
		public Trie() {
			root = new TrieNode();
		}
		public void insert(String word) {
			if(word == null || word.length == 0) {
				return;
			}
			TrieNode current = root;
			for(int i = 0; i < word.length(); i++) {
				char c = word.charAt(i);
				if(!current.getChildren().containsKey(c)) {
					current.getChildren().put(c, new TrieNode());
				}	
				current = current.getChildren().get(c);
			}
			current.setEnd();
		}
		public boolean search(String word) {
			TrieNode current = root;
        	for(int i = 0; i < word.length(); i++) {
           		char c = word.charAt(i);
            	TrieNode next = current.getChildren().get(c);
            	if(next == null) {
                	return false;
            	}
            	current = next;
        	}
        	return current.isEnd();
		}
		public boolean startWith(String word) {
			TrieNode current = root;
        	for(int i = 0; i < word.length(); i++) {
           		char c = word.charAt(i);
            	TrieNode next = current.getChildren().get(c);
            	if(next == null) {
                	return false;
            	}
            	current = next;
        	}
        	return true;
		}
	}



    public List<String> findWords(char[][] board, String[] words) {
        List<String> list = new ArrayList<String>();
        HashSet<String> set = new HashSet<String>();
        if(words == null || words.length == 0 || board == null || board.length == 0 || board[0].length == 0) {
        	return list;
        }
        Trie trie = new Trie();
        for(String word: words) {
        	trie.insert(word);
        }
        //boolean[][] visited = 
        int m = board.length, n = board[0].length;
        for(int i = 0; i < m; i++) {
        	for(int j = 0; j < n; j++) {
        		dfs(board, i, j, set, trie, "");
        	}
        }
        return new ArrayList<String>(set);
    }
    private void dfs(char[][] board, int i, int j, HashSet<String> set, Trie trie, String s) {
    	if(i < 0 || j < 0 || i >= board.length || j >= board[0].length || board[i][j] == '#') {
    		return;
    	}
    	s = s + board[i][j];
    	if(!trie.startWith(s)) {
    		return;
    	}
    	if(trie.search(s)) {
    		set.add(s);
    	}
    	char c = board[i][j];
    	board[i][j] = '#';
    	dfs(board, i + 1, j, set, trie, s);
    	dfs(board, i - 1, j, set, trie, s);
    	dfs(board, i, j + 1, set, trie, s);
    	dfs(board, i, j - 1, set, trie, s);
    	board[i][j] = c;
    }
}


















