432. All O`one Data Structure

Implement a data structure supporting the following operations:

Inc(Key) - Inserts a new key with value 1. Or increments an existing key by 1. Key is guaranteed to be a non-empty string.
Dec(Key) - If Key's value is 1, remove it from the data structure. Otherwise decrements an existing key by 1. If the key does not exist, this function does nothing. Key is guaranteed to be a non-empty string.
GetMaxKey() - Returns one of the keys with maximal value. If no element exists, return an empty string "".
GetMinKey() - Returns one of the keys with minimal value. If no element exists, return an empty string "".
Challenge: Perform all these in O(1) time complexity.

public class AllOne {
    
    /** Initialize your data structure here. */
    
    public class Node {
        private Set<String> keySet;
        private Node prev;
        private Node next;
        private int value;
        public Node(int value) {
            this.value = value;
            keySet = new HashSet<>();
            prev = null;
            next = null;
        }
    }
    
    
    private Map<String, Node> map;
    private Node head;
    private Node tail;
    public AllOne() {
        map = new HashMap<>();
        head = new Node(-1);
        tail = new Node(-1);
        head.next = tail;
        tail.prev = head;
    }
    
    /** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */
    public void inc(String key) {
        if(!map.containsKey(key)) {
            if(head.next.value != 1) {
                insertNode(head, new Node(1), head.next);
            }
            map.put(key, head.next);
            head.next.keySet.add(key);
        } else {
            Node current = map.get(key);
            current.keySet.remove(key);
            Node next = current.next;
            if(next.value != current.value + 1) {
                insertNode(current, new Node(current.value + 1), next); 
            }
            current.next.keySet.add(key);
            map.put(key, current.next);
            if(current.keySet.isEmpty()) {
                removeNode(current.prev, current, current.next);
            }
        }
    }
    
    /** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */
    public void dec(String key) {
        if(!map.containsKey(key)) {
            return;
        } else {
            Node current = map.get(key);
            current.keySet.remove(key);
            if(current.value != 1) {
                if(current.prev.value != current.value - 1) {
                    insertNode(current.prev, new Node(current.value - 1), current);
                }
                current.prev.keySet.add(key);
                map.put(key, current.prev);
            } else {
                map.remove(key);
            }
            if(current.keySet.isEmpty()) {
                removeNode(current.prev, current, current.next);
            }
        }
    }
    
    /** Returns one of the keys with maximal value. */
    public String getMaxKey() {
        if(head.next == tail) {
            return "";
        }
        return tail.prev.keySet.iterator().next();
    }
    
    /** Returns one of the keys with Minimal value. */
    public String getMinKey() {
        if(head.next == tail) {
            return "";
        }
        return head.next.keySet.iterator().next();
    }
    
    private void insertNode(Node h, Node c, Node t) {
        c.prev = h;
        c.next = t;
        h.next = c;
        t.prev = c;
    }
    private void removeNode(Node h, Node c, Node t) {
        c.prev.next = t;
        c.next.prev = h;
    }
}

/**
 * Your AllOne object will be instantiated and called as such:
 * AllOne obj = new AllOne();
 * obj.inc(key);
 * obj.dec(key);
 * String param_3 = obj.getMaxKey();
 * String param_4 = obj.getMinKey();
 */